import os
from dotenv import load_dotenv

# Load environment variables from the .env file
load_dotenv()

class Config:
    """
    Configuration class to hold the model selection and API keys.
    
    Attributes:
        TRANSCRIPTION_MODEL (str): The model to use for transcription ('openai', 'groq', 'deepgram', 'fastwhisperapi', 'local').
        RESPONSE_MODEL (str): The model to use for response generation ('openai', 'groq', 'local').
        TTS_MODEL (str): The model to use for text-to-speech ('openai', 'deepgram', 'elevenlabs', 'melotts', 'cartesia', 'local').
        OPENAI_API_KEY (str): API key for OpenAI services.
        GROQ_API_KEY (str): API key for Groq services.
        DEEPGRAM_API_KEY (str): API key for Deepgram services.
        ELEVENLABS_API_KEY (str): API key for ElevenLabs services.
        BRAVE_API_KEY (str): API key for Brave Search services (used for web search and news).

    """
    # Model selection 
    TRANSCRIPTION_MODEL = 'deepgram'  # I am thinking og using theses oga eme ka everthing diri anyi easy for maintenance and values: openai, groq, deepgram, fastwhisperapi
    RESPONSE_MODEL = 'groq'  # Changed from 'groq' to 'openai' since we're using OpenAI as fallback
    TTS_MODEL = 'deepgram'  # I am thinking og using theses oga eme ka everthing diri anyi easy for maintenance and values: openai, deepgram, elevenlabs, melotts, cartesia

    # Model names for each provider
    OPENAI_STT_MODEL = "whisper-1"
    GROQ_STT_MODEL = "whisper-large-v3"
    DEEPGRAM_STT_MODEL = "nova-2"
    ELEVENLABS_STT_MODEL = "eleven_flash_v2"

    # LLM Selection
    OLLAMA_LLM = "llama2:13b"  # Updated to a more stable model
    GROQ_LLM = "mixtral-8x7b-32768"  # Updated to latest Groq model
    OPENAI_LLM = "gpt-3.5-turbo"  # Changed to a more widely available model

    # API keys and paths
    OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
    GROQ_API_KEY = os.getenv("GROQ_API_KEY")
    DEEPGRAM_API_KEY = os.getenv("DEEPGRAM_API_KEY")
    ELEVENLABS_API_KEY = os.getenv("ELEVENLABS_API_KEY")
    LOCAL_MODEL_PATH = os.getenv("LOCAL_MODEL_PATH")
    CARTESIA_API_KEY = os.getenv("CARTESIA_API_KEY")
    BRAVE_API_KEY = os.getenv("BRAVE_API_KEY", "")  # Used for both web search and news
    GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")  # Added Gemini API key

    # for serving the MeloTTS model
    TTS_PORT_LOCAL = 5150

    # temp file generated by the initial STT model
    INPUT_AUDIO = "test.mp3"

    # Model generation settings
    CONTENT_FILTER_LEVEL = "medium"  # Possible values: low, medium, high
    MAX_RETRIES = 3
    RETRY_DELAY = 1  # seconds
    
    
    # Content safety thresholds for Gemini
    SAFETY_SETTINGS = [
        {
            "category": "HARM_CATEGORY_HARASSMENT",
            "threshold": "BLOCK_MEDIUM_AND_ABOVE"
        },
        {
            "category": "HARM_CATEGORY_HATE_SPEECH",
            "threshold": "BLOCK_MEDIUM_AND_ABOVE"
        },
        {
            "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
            "threshold": "BLOCK_MEDIUM_AND_ABOVE"
        },
        {
            "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
            "threshold": "BLOCK_MEDIUM_AND_ABOVE"
        }
    ]

    # Search settings
    SEARCH_TIMEOUT = 30  # seconds
    SEARCH_MAX_RESULTS = 5
    SEARCH_PROVIDERS = ["serpapi", "brave", "ddg"]  # Order of preference
    
    # Cache settings
    CACHE_TTL = 300  # 5 minutes for real-time data
    CACHE_SIZE = 1000
    
    # Real-time sources
    REALTIME_SOURCES = {
        "news": ["news-api", "rss-feeds"],
        "weather": ["openweathermap", "weatherapi"],
        "stocks": ["alpha-vantage", "yahoo-finance"],
        "sports": ["sports-api", "espn"],
    }

    @staticmethod
    def validate_config():
        """
        Validate the configuration to ensure all necessary environment variables are set.
        
        Raises:
            ValueError: If a required environment variable is not set.
        """
        Config._validate_model('TRANSCRIPTION_MODEL', [
            'openai', 'groq', 'deepgram', 'fastwhisperapi', 'local'])
        Config._validate_model('RESPONSE_MODEL', [
            'openai', 'groq', 'ollama', 'local'])
        Config._validate_model('TTS_MODEL', [
            'openai', 'deepgram', 'elevenlabs', 'melotts', 'cartesia', 'local'])

        Config._validate_api_key('TRANSCRIPTION_MODEL', 'openai', 'OPENAI_API_KEY')
        Config._validate_api_key('TRANSCRIPTION_MODEL', 'groq', 'GROQ_API_KEY')
        Config._validate_api_key('TRANSCRIPTION_MODEL', 'deepgram', 'DEEPGRAM_API_KEY')

        Config._validate_api_key('RESPONSE_MODEL', 'openai', 'OPENAI_API_KEY')
        Config._validate_api_key('RESPONSE_MODEL', 'groq', 'GROQ_API_KEY')

        Config._validate_api_key('TTS_MODEL', 'openai', 'OPENAI_API_KEY')
        Config._validate_api_key('TTS_MODEL', 'deepgram', 'DEEPGRAM_API_KEY')
        Config._validate_api_key('TTS_MODEL', 'elevenlabs', 'ELEVENLABS_API_KEY')
        Config._validate_api_key('TTS_MODEL', 'cartesia', 'CARTESIA_API_KEY')

    @staticmethod
    def _validate_model(attribute, valid_options):
        model = getattr(Config, attribute)
        if model not in valid_options:
            raise ValueError(
                f"Invalid {attribute}. Must be one of {valid_options}"
            )
        
    @staticmethod
    def _validate_api_key(model_attr, model_value, api_key_attr):
        if getattr(Config, model_attr) == model_value and not getattr(Config, api_key_attr):
            raise ValueError(f"{api_key_attr} is required for {model_value} models")

    @staticmethod
    def get_api_key(service: str) -> str:
        """Get API key for a specific service with validation"""
        key = getattr(Config, f"{service.upper()}_API_KEY", None)
        if not key:
            raise ValueError(f"Missing API key for {service}")
        return key